% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixed.dens.R
\name{predict.cmdSuperLearner}
\alias{predict.cmdSuperLearner}
\title{Prediction method for cmdSuperLearner}
\usage{
\method{predict}{cmdSuperLearner}(fit, newA, newW, threshold = 0.001)
}
\arguments{
\item{fit}{Fitted \code{\link{cmdSuperLearner}} object. Must have been run with \code{control$saveFitLibrary = TRUE}.}

\item{newA}{\code{m x 1} numeric vector of new exposure values.}

\item{newW}{\code{m x p} data.frame of new covariate values.}

\item{threshold}{Minimum coefficient value for which library algorithms should be included in the prediction.}
}
\value{
\code{cmdSuperLearner} returns a named list with the following elements:
\item{fit.times}{The time points at which the counterfactual survival curves (and contrasts) were fit.}
}
\description{
This function predicts standardized conditional density function values given a fitted model and new data,
}
\examples{
# Sample data
set.seed(220)
n <- 1000
W <- data.frame(W1 = runif(n))
Z <- rbinom(n, size = 1, prob = 1/(1 + exp(2-W$W1)))
A <- (1-Z) * rnorm(n, mean = W$W1, sd = abs(1 + W$W1))
fit <- cmdSuperLearner(A, W, control=list(SL.library = c("SL.mean", "SL.glm", "SL.gam", "SL.earth"), verbose=TRUE, n.bins = c(2:10)))
# Get predicted standardized "density" (really mass) at 0
pred <- predict.cmdSuperLearner(fit = fit, newA = rep(0, n), newW = W)
true.g <- 1 /(integrate(function(x) 1/(1 + exp(2-x)), 0, 1)$value * (1 + exp(2-W$W1)))
plot(true.g, pred)
abline(0,1, col='red')
}
